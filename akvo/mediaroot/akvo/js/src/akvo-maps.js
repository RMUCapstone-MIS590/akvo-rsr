/*jslint browser: true*/
/*global $, jQuery, Handlebars, google*/

(function () {
    "use strict";

    // When included akvo-maps.js will query the page for elements with 
    // class ".akvo_map". These elements should be generated by the maps 
    // Django template tag. Each map element will have a div element and
    // a JavaScript litteral with data which are used to create a map with
    // corresponding locations from the RSR API

    var addMap, addPin, populateMap, mapOptions, prepareNextRequest;


    // For each .akvo_map element on the page, read options
    // and kick of the creation of a new map
    $(document).ready(function () {
        $('.akvo_map').each(function () {
            var mapId = $(this).attr('id');
            addMap({
                mapId: mapId,
                mapElement: document.getElementById(mapId),
                mapOpts: window[mapId]
            });
        });
    });

    // Creates the map with options and makes the initial AJAX request
    addMap = function (map) {
        $(map.mapElement).gmap(mapOptions(map.mapOpts.type)).bind('init', function () {

            // TODO
            // Handle other resources
            // if (objectId == 'projects') {
            //     resourceURL =  'http://akvo.dev/api/v1/project/?format=jsonp&depth=1&callback=?';
            // }
            // else if (objectId == 'organisations') {
            //     resourceURL =  'http://akvo.dev/api/v1/organisation/?format=jsonp&depth=1&callback=?';
            // } else {
            //     resourceURL = 'http://akvo.dev/api/v1/project/' + objectId + '/?format=jsonp&depth=1&callback=?';
            // }

            var resourceURL =  map.mapOpts.host + 'api/v1/project/?format=jsonp&depth=1&limit=20&callback=?';
            $.getJSON(resourceURL, function (data) {
                populateMap(map, data);
            });
        });
    };

    // Populates the map with data
    populateMap = function (map, data) {
        var projects = data.objects, pinTmpl = Handlebars.compile(
            '<div class="mapInfoWindow"' +
                'style="height:150px; min-height:150px; max-height:150px; overflow:hidden;">' +
                '<a class="small" href="{{url}}">{{title}}</a>' +
                '{{#if thumb}}' +
                    '<div style="text-align: center; margin-top: 5px;">' +
                        '<a href="{{url}}" title="{{title}}">' +
                            '<img src="{{thumb}}" alt="">' +
                        '</a>' +
                    '</div>' +
                '{{/if}}' +
                '</div>'
        );

        $.each(projects, function (i, project) {
            $.each(project.locations, function (k, location) {
                // Add project data to the location
                location.url = project.absolute_url;
                location.title = project.title;
                try {
                    location.thumb = project.current_image.thumbnails.map_thumb;
                } catch (e) { location.thumb = ''; }

                addPin(map, location, pinTmpl);
            });
        });

        // If there is to grap from the resource make go
        if (data.meta.next !== null) {
            prepareNextRequest(map, data.meta.next);
        }
    };

    // Add a single pin
    addPin = function (map, location, template) {
        if (map.mapOpts.type === 'static') {
            $(map.mapElement).gmap('addMarker', {
                'position': new google.maps.LatLng(location.latitude, location.longitude),
                'clickable': false,
                // 'icon': blueMarker,
                'bounds': true
            });
        } else {
            $(map.mapElement).gmap('addMarker', {
                'position': new google.maps.LatLng(location.latitude, location.longitude),
                'bounds': true
            }).click(function () {
                $(map.mapElement).gmap('openInfoWindow', {
                    'content': template(location)
                }, this);
            });
        }
    };


    // Since we need to update the callback parameters we don't use the meta.next
    // but create a new resource url
    prepareNextRequest = function (map, resource) {
        var url = $.url(resource),
            urlTmpl = Handlebars.compile('{{host}}{{path}}?format=jsonp&depth=1&limit=' +
                '{{limit}}&offset={{offset}}&callback=?'),
            newUrl = urlTmpl({
                'host': url.attr('host'),
                'path': url.attr('path'),
                'limit': Number(url.param('limit')),
                'offset': Number(url.param('offset'))
            });
        $.getJSON(newUrl, function (data) {
            populateMap(map, data);
        });
    };


    // Static or dynamic map options
    mapOptions = function (mapType) {
        var options;
        if (mapType === 'static') {
            options = {
                'draggable': false,
                'mapTypeControl': false,
                'navigationControl': true,
                'scaleControl': false,
                'scrollwheel': false,
                'streetViewControl': false
            };
        } else {
            options = {
                'draggable': true,
                'mapTypeControl': true,
                'navigationControl': true,
                'scaleControl': true,
                'scrollwheel': false,
                'streetViewControl': false
            };
        }
        return options;
    };
}());
