Media Packer

* Goal
To be able to handle css & javascript files in a more organised and efficient way.

* What
Instead of having a large css file we want to have several small ones. Each representing a block of styles, can be part of the site like mainnav or something like typography. The use of several small css files makes it much easier to manage updates and retain an overview of the evolving styles and scripts. At the same time we want don't want to serve several css & javascript files to the user because of the http request overhead which is bad for performance.

* How
We define media bundles in a python file. Each media bundle can consist of one or more source files. All those source files will be combined into one file for use on the site. 

** Overview
When a developer makes a commit in git the packer script parses the media_bundles.py file where we have defined our media bundles. For each bundle the source files are combined into one file. The file is persisted to disk, and also added to the git index. In our templates we can then with the "media_bundle" template tag call for a specific media bundle e.g. {% media_bundle 'akvo_style' %}. Depending on the media bundle type (css or js) the template tag will add the corresponding code block pointing to the combined file.


** In depth
Besides combining the bundles files the media packer also enables support for compression of bundle files, naming based on the content (with a hash) and a way to make development easier by bypassing the combined files and link directly agains the source files.

The media packer uses the YUICompressor(http://developer.yahoo.com/yui/compressor/) for compressing the bundle files, one can chose it the bundle should be compressed on bundle level in the media_bundle file.

The combined files are named with a fingerprint (hash) based on the file contents. This makes it possible to set expires header to the files in the webserver. In practice this will make users cache our styles and javascript files on their first visit. Since we can have a long expire date it's a good chance the user will not need to load those form our server but use their browser cache. To make sure that new styles and javascript get's used and not old ones stored in the users browser cache we add a hash to the file name. The template tag uses a map file named map.py to locate the current file name for the bundle. This file is separated from the media_bundles file since we don't wan't to mix user defined files and auto generated files. In this way one can comment in the media_bundles.py file without any risk.


The development mode is utilised by adding a DEV_MEDIA_BUNDLES=TRUE to the settings file. For styles the template tag will link against a raw file which are generated by the packer script. The raw file then imports the source files by using css @imports. For javascript the template tag will link directly to the source files. 


** Media packer elements
- A media_bundle.py file where bundles are defined.
- A map.py file used by Django for lookups.
- A packer script that generate combined & compressed bundle files. It also populates the map.py.
- A media_bundle Django template tag which uses the map.py for lookups.
- A git hook "pre-commit" that call the packer script before a commit.
- On first request and execution of the scripts/media_packer/__init__.py a symlink to the git hook is setup.
- A DEV_MEDIA_BUNDLES=TRUE setting.
- Add expires header to the apache configuration.


** Things to consider

*** If the script stumbles upon errors because of a misconfiguration of the media_bundles the commit will be aborted. This is done by design. We don't want to checkin broken code. And only changes to the media bundles will be a possibility for errors.

*** The pre-commit git hook is setup on the first http request. Hence if you clone the system the git-hook will not be in place before you have run the project. If you want you can always manually symlink the pre-commit hook from ".git/hooks/" to "git_hooks/" in the project root. The automatic sym-linking is made in "akvo/scripts/media_packer/__init__.py"

*** If you want to add a new source file to a bundle the actual media_bundle definition needs to commit before it's used for combining. Hence you need an extra commit of adding the source file to media_bundles and then before the second commit the pre-commit hook is triggered and that will generate a new combined file.

Resources:
http://developer.yahoo.com/performance/rules.html
http://developer.yahoo.com/yui/compressor/
http://cjohansen.no/en/apache/using_a_far_future_expires_header

Roadmap:
Maybe add JSLint as an test for javascript bundles.


