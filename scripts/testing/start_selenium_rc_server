#!/bin/bash

# Parameters:
# $1: logging_path
# $2: xvfb_logging_path (optional)


cd "`dirname $0`"

function display_usage_and_exit
{
    echo "Usage: start_selenium_rc_server <logging_path> [xvfb_logging_path]"
    echo "Optionally specify an xvfb_logging_path to operate in headless mode"
    exit -1
}

function ensure_log_path_is_writable
{
    # Parameters:
    # $1: log path to check
    # $2: name of process being logged

    # check whether the logging path exists and is writable
    if [ ! -e "$1" ]; then
        printf ">> $2 logging path does not exist: $1\n"
        exit -1
    elif [ ! -w "$1" ]; then
        printf ">> $2 logging path is not writable: $1\n"
        exit -1
    fi
}

function verify_script_parameters
{
    # warn if extraneous parameters exist
    if [ -n "$3" ]; then
        printf ">> Unexpected number of parameters: $*\n"
        display_usage_and_exit
    fi

    # check whether the logging_path parameter exists
    if [ -z "$1" ]; then
        echo ">> Missing logging_path parameter"
        display_usage_and_exit
    fi

    ensure_log_path_is_writable $1 "Selenium RC server"

    # check xvfb_logging_path parameter if specified
    if [ -n "$2" ]; then
        ensure_log_path_is_writable $2 "Xvfb"
    fi
}


verify_script_parameters $*

LOG_TIMESTAMP=`date -u +%Y%m%d_%H%M%S`
RC_SERVER_LOG_PATH=$1
RC_SERVER_LOG_FILE=$RC_SERVER_LOG_PATH/rc_server_$LOG_TIMESTAMP.log

MODE="NORMAL"

# check if we're running the Selenium server in headless mode
if [ -n "$2" ]; then
    MODE="HEADLESS"
    XVFB_PATH=`which Xvfb`

    # check whether Xvfb is on the path and executable
    if [ ! -x "$XVFB_PATH" ]; then
        printf ">> Xvfb not found on the path: $PATH\n"
        exit -1
    fi

    if [ -z "$DISPLAY" ]; then
        printf ">> DISPLAY environment variable should be set when using Xvfb\n"
        exit -1
    fi

    XVFB_LOG_PATH=$2
    XVFB_LOG_FILE=$XVFB_LOG_PATH/xvfb_$LOG_TIMESTAMP.log

    printf "Starting Xvfb on display $DISPLAY\n"
    printf "Xvfb log: $XVFB_LOG_FILE\n"
    Xvfb $DISPLAY -ac > $XVFB_LOG_FILE 2>&1 &
    echo $! > $XVFB_LOG_PATH/xvfb.pid # save Xvfb process ID
    echo $DISPLAY > $XVFB_LOG_PATH/xvfb_display.txt # save Xvfb display for later reference

    printf "Starting Selenium RC server on display $DISPLAY\n"
fi

printf "Selenium RC server log: $RC_SERVER_LOG_FILE\n"

java -version > $RC_SERVER_LOG_FILE 2>&1
java -jar ../../tools/selenium/1.0.3/rc-server/selenium-server.jar >> $RC_SERVER_LOG_FILE 2>&1 &
echo $! > $RC_SERVER_LOG_PATH/rc_server.pid # save RC server process ID for later use

function wait_for_selenium_rc_server_to_complete_startup
{
    echo "Waiting for Selenium RC server to finish starting..."

    MAX_WAIT_ATTEMPTS=60
    ATTEMPT=0
    SECONDS_TO_SLEEP=2

    while [ -z "`grep jetty.servlet $RC_SERVER_LOG_FILE`" -a $ATTEMPT -lt $MAX_WAIT_ATTEMPTS ]; do
        let ATTEMPT++
        sleep $SECONDS_TO_SLEEP
    done

    if [ -n "`grep jetty.servlet $RC_SERVER_LOG_FILE`" ]; then
        printf "Selenium RC server startup completed\n\n"
    else
        echo ">> Selenium RC server failed to complete startup after waiting for 120 seconds"
        exit -1
    fi
}

wait_for_selenium_rc_server_to_complete_startup
