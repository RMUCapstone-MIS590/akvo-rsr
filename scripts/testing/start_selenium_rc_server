#!/bin/bash

# Parameters:
# $1: logging_path
# $2: xvfb_logging_path (optional)
# $3: display_number (optional but required if $2 is present)


cd "`dirname $0`"

function display_usage_and_exit
{
    echo "Usage: start_selenium_rc_server <logging_path> [xvfb_logging_path] [display_number]"
    echo "Optionally specify an xvfb_logging_path and display_number to operate in headless mode"
    exit -1
}

function ensure_log_path_is_writable
{
    # Parameters:
    # $1: log path to check
    # $2: name of process being logged

    # check whether the logging path exists and is writable
    if [ ! -e "$1" ]; then
        printf ">> $2 logging path does not exist: $1\n"
        exit -1
    elif [ ! -w "$1" ]; then
        printf ">> $2 logging path is not writable: $1\n"
        exit -1
    fi
}

function verify_script_parameters
{
    # warn if extraneous parameters exist
    if [ -n "$4" ]; then
        echo ">> Unexpected number of parameters"
        display_usage_and_exit
    fi

    # check whether the logging_path parameter exists
    if [ -z "$1" ]; then
        echo ">> Missing logging_path parameter"
        display_usage_and_exit
    fi

    ensure_log_path_is_writable $1 "Selenium RC server"

    # check Xvfb parameters if xvfb_logging_path parameter was specified
    if [ -n "$2" ]; then
        # check whether display_number parameter also exists
        if [ -z "$3" ]; then
            echo ">> Missing display_number parameter"
            display_usage_and_exit
        fi

        # check that the display_number parameter is a number greater than 1
        if echo $3 | egrep -q -v "^[1-9][0-9]*$"; then
            printf ">> The display_number parameter [$3] must be a positive integer\n"
            display_usage_and_exit
        fi

        ensure_log_path_is_writable $2 "Xvfb"
    fi
}


verify_script_parameters $1 $2 $3 $4

LOG_TIMESTAMP=`date -u +%Y%m%d_%H%M%S`
RC_SERVER_LOG_PATH=$1
RC_SERVER_LOG_FILE=$RC_SERVER_LOG_PATH/rc_server_$LOG_TIMESTAMP.log

MODE="NORMAL"
DISPLAY_NUMBER=""

# check if we're running the Selenium server in headless mode
if [ -n "$2" ]; then
    MODE="HEADLESS"
    DISPLAY_NUMBER=":$3"
    XVFB_PATH=`which Xvfb`

    # check whether Xvfb is on the path and executable
    if [ ! -x "$XVFB_PATH" ]; then
        printf ">> Xvfb not found on the path: $PATH\n"
        exit -1
    fi

    XVFB_LOG_PATH=$2
    XVFB_LOG_FILE=$XVFB_LOG_PATH/xvfb_$LOG_TIMESTAMP.log

    export DISPLAY=$DISPLAY_NUMBER

    printf "Xvfb display number = $DISPLAY_NUMBER\n"
    printf "Xvfb log: $XVFB_LOG_FILE\n"
    Xvfb $DISPLAY_NUMBER -ac > $XVFB_LOG_FILE 2>&1 &
    echo $! > $XVFB_LOG_PATH/xvfb.pid # save Xvfb process ID
    echo $DISPLAY_NUMBER > $XVFB_LOG_PATH/xvfb_display.txt # save Xvfb display number
fi

printf "Selenium RC server log: $RC_SERVER_LOG_FILE\n\n"
java -version > $RC_SERVER_LOG_FILE 2>&1
java -jar ../../tools/selenium/1.0.3/rc-server/selenium-server.jar >> $RC_SERVER_LOG_FILE 2>&1 &
echo $! > $RC_SERVER_LOG_PATH/rc_server.pid # save RC server process ID
